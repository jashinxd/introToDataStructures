Jason Shin (jjs270)

1. Revise ExpressionTree.java as explained below. Demonstrate these revisions and include sample output in your report.
   a. In order to create the compute method, I created a stack of doubles called nums to keep track of all the operands
      that I would be using. In the method, I followed steps similar to the printPostfix method. I checked to see if the
      node passed in as an argument was not null. Then I checked if the left and right nodes were not null, in which case
      compute would be run on both of them. If the node's data value is a digit, I would convert the char to a double and
      push it to the nums stack. If the node's data value is not a digit (in other words, an operation), I would pop two
      values from the nums stack and perform the operation, then push the result back onto the stack.

      Sample Output:
      

2. In your report, draw the state of a binary tree after each of the following (in order a â€“ n):
a. Insert 9
        9
b. Insert 3
   	9
       /
      3
c. Insert 2
        9
       /
      3
     /
    2
d. Insert 1
        9
       /
      3
     /
    2
   /
  1
e. Insert 6
        9
       /
      3
     / \
    2   6
   /
  1
f. Insert 7
        9
       /
      3
     / \
    2   6
   /     \
  1       7
g. Insert 5
        9
       /
      3
     / \
    2   6
   /   / \
  1   5   7
h. Insert 4
        9
       /
      3
     / \
    2   6
   /   / \
  1   5   7
     /
    4
i. Insert 8
        9
       /
      3
     / \
    2   6
   /   / \
  1   5   7
     /     \
    4       8
j. Remove 8
        9
       /
      3
     / \
    2   6
   /   / \
  1   5   7
     /
    4
k. Remove 5
        9
       /
      3
     / \
    2   6
   /   / \
  1   4   7    
l. Remove 6
        9
       /
      3
     / \
    2   7
   /   / 
  1   4   
m. Remove 3
        9
       /
      4
     / \
    2   7
   /    
  1   
n. Remove 9

3. 
